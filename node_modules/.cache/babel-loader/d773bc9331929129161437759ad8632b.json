{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, ref, inject, getCurrentInstance, onMounted, watch, onBeforeUnmount, computed, reactive, resolveComponent, openBlock, createElementBlock, normalizeStyle, normalizeClass, createCommentVNode, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString, createTextVNode } from 'vue';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport { Close, Check } from '@element-plus/icons-vue';\nimport '../../../hooks/index2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElStep\",\n  components: {\n    ElIcon,\n    Close,\n    Check\n  },\n  props: {\n    title: {\n      type: String,\n      default: \"\"\n    },\n    icon: {\n      type: [String, Object],\n      default: \"\"\n    },\n    description: {\n      type: String,\n      default: \"\"\n    },\n    status: {\n      type: String,\n      default: \"\",\n      validator: val => [\"\", \"wait\", \"process\", \"finish\", \"error\", \"success\"].includes(val)\n    }\n  },\n\n  setup(props) {\n    const ns = useNamespace(\"step\");\n    const index = ref(-1);\n    const lineStyle = ref({});\n    const internalStatus = ref(\"\");\n    const parent = inject(\"ElSteps\");\n    const currentInstance = getCurrentInstance();\n    onMounted(() => {\n      watch([() => parent.props.active, () => parent.props.processStatus, () => parent.props.finishStatus], ([active]) => {\n        updateStatus(active);\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter(instance => instance.uid !== currentInstance.uid);\n    });\n    const currentStatus = computed(() => {\n      return props.status || internalStatus.value;\n    });\n    const prevStatus = computed(() => {\n      const prevStep = parent.steps.value[index.value - 1];\n      return prevStep ? prevStep.currentStatus : \"wait\";\n    });\n    const isCenter = computed(() => {\n      return parent.props.alignCenter;\n    });\n    const isVertical = computed(() => {\n      return parent.props.direction === \"vertical\";\n    });\n    const isSimple = computed(() => {\n      return parent.props.simple;\n    });\n    const stepsCount = computed(() => {\n      return parent.steps.value.length;\n    });\n    const isLast = computed(() => {\n      var _a;\n\n      return ((_a = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === currentInstance.uid;\n    });\n    const space = computed(() => {\n      return isSimple.value ? \"\" : parent.props.space;\n    });\n    const style = computed(() => {\n      const style2 = {\n        flexBasis: typeof space.value === \"number\" ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`\n      };\n      if (isVertical.value) return style2;\n\n      if (isLast.value) {\n        style2.maxWidth = `${100 / stepsCount.value}%`;\n      }\n\n      return style2;\n    });\n\n    const setIndex = val => {\n      index.value = val;\n    };\n\n    const calcProgress = status => {\n      let step = 100;\n      const style2 = {};\n      style2.transitionDelay = `${150 * index.value}ms`;\n\n      if (status === parent.props.processStatus) {\n        step = 0;\n      } else if (status === \"wait\") {\n        step = 0;\n        style2.transitionDelay = `${-150 * index.value}ms`;\n      }\n\n      style2.borderWidth = step && !isSimple.value ? \"1px\" : 0;\n      style2[parent.props.direction === \"vertical\" ? \"height\" : \"width\"] = `${step}%`;\n      lineStyle.value = style2;\n    };\n\n    const updateStatus = activeIndex => {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus;\n      } else if (activeIndex === index.value && prevStatus.value !== \"error\") {\n        internalStatus.value = parent.props.processStatus;\n      } else {\n        internalStatus.value = \"wait\";\n      }\n\n      const prevChild = parent.steps.value[stepsCount.value - 1];\n      if (prevChild) prevChild.calcProgress(internalStatus.value);\n    };\n\n    const stepItemState = reactive({\n      uid: computed(() => currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress\n    });\n    parent.steps.value = [...parent.steps.value, stepItemState];\n    return {\n      ns,\n      index,\n      lineStyle,\n      currentStatus,\n      isCenter,\n      isVertical,\n      isSimple,\n      isLast,\n      space,\n      style,\n      parent,\n      setIndex,\n      calcProgress,\n      updateStatus\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_check = resolveComponent(\"check\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    style: normalizeStyle(_ctx.style),\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(_ctx.isSimple ? \"simple\" : _ctx.parent.props.direction), _ctx.ns.is(\"flex\", _ctx.isLast && !_ctx.space && !_ctx.isCenter), _ctx.ns.is(\"center\", _ctx.isCenter && !_ctx.isVertical && !_ctx.isSimple)])\n  }, [createCommentVNode(\" icon & line \"), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"head\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [!_ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"line\"))\n  }, [createElementVNode(\"i\", {\n    class: normalizeClass(_ctx.ns.e(\"line-inner\")),\n    style: normalizeStyle(_ctx.lineStyle)\n  }, null, 6)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"icon\"), _ctx.ns.is(_ctx.icon ? \"icon\" : \"text\")])\n  }, [_ctx.currentStatus !== \"success\" && _ctx.currentStatus !== \"error\" ? renderSlot(_ctx.$slots, \"icon\", {\n    key: 0\n  }, () => [_ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"icon-inner\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), !_ctx.icon && !_ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"icon-inner\"))\n  }, toDisplayString(_ctx.index + 1), 3)) : createCommentVNode(\"v-if\", true)]) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([_ctx.ns.e(\"icon-inner\"), _ctx.ns.is(\"status\")])\n  }, {\n    default: withCtx(() => [_ctx.currentStatus === \"success\" ? (openBlock(), createBlock(_component_check, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_close, {\n      key: 1\n    }))]),\n    _: 1\n  }, 8, [\"class\"]))], 2)], 2), createCommentVNode(\" title & description \"), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"main\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"title\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), _ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"arrow\"))\n  }, null, 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass([_ctx.ns.e(\"description\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [renderSlot(_ctx.$slots, \"description\", {}, () => [createTextVNode(toDisplayString(_ctx.description), 1)])], 2))], 2)], 6);\n}\n\nvar Step = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/steps/src/item.vue\"]]);\n\nexport { Step as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElIcon","Close","Check","props","title","type","default","icon","String","Object","description","status","validator","val","includes","setup","useNamespace","ref","inject","currentInstance","getCurrentInstance","onMounted","watch","parent","active","processStatus","finishStatus","updateStatus","immediate","onBeforeUnmount","value","steps","filter","instance","uid","computed","internalStatus","prevStep","index","currentStatus","alignCenter","direction","simple","length","flexBasis","style2","calcProgress","step","borderWidth","lineStyle","prevStatus","prevChild","stepItemState","setIndex","ns","isCenter","isVertical","isSimple","isLast","space","style","class","_ctx","b","is","_createCommentVNode","_createElementVNode","key","_normalizeClass","e","_renderSlot","_openBlock","createCommentVNode"],"sources":["../../../../../../packages/components/steps/src/item.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"style\"\n    :class=\"[\n      ns.b(),\n      ns.is(isSimple ? 'simple' : parent.props.direction),\n      ns.is('flex', isLast && !space && !isCenter),\n      ns.is('center', isCenter && !isVertical && !isSimple),\n    ]\"\n  >\n    <!-- icon & line -->\n    <div :class=\"[ns.e('head'), ns.is(currentStatus)]\">\n      <div v-if=\"!isSimple\" :class=\"ns.e('line')\">\n        <i :class=\"ns.e('line-inner')\" :style=\"lineStyle\" />\n      </div>\n\n      <div :class=\"[ns.e('icon'), ns.is(icon ? 'icon' : 'text')]\">\n        <slot\n          v-if=\"currentStatus !== 'success' && currentStatus !== 'error'\"\n          name=\"icon\"\n        >\n          <el-icon v-if=\"icon\" :class=\"ns.e('icon-inner')\">\n            <component :is=\"icon\" />\n          </el-icon>\n          <div v-if=\"!icon && !isSimple\" :class=\"ns.e('icon-inner')\">\n            {{ index + 1 }}\n          </div>\n        </slot>\n        <el-icon v-else :class=\"[ns.e('icon-inner'), ns.is('status')]\">\n          <check v-if=\"currentStatus === 'success'\" />\n          <close v-else />\n        </el-icon>\n      </div>\n    </div>\n    <!-- title & description -->\n    <div :class=\"ns.e('main')\">\n      <div :class=\"[ns.e('title'), ns.is(currentStatus)]\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div v-if=\"isSimple\" :class=\"ns.e('arrow')\" />\n      <div v-else :class=\"[ns.e('description'), ns.is(currentStatus)]\">\n        <slot name=\"description\">{{ description }}</slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { Check, Close } from '@element-plus/icons-vue'\n\nimport { useNamespace } from '@element-plus/hooks'\nimport type { Component, PropType, Ref } from 'vue'\n\nexport interface IStepsProps {\n  space: number | string\n  active: number\n  direction: string\n  alignCenter: boolean\n  simple: boolean\n  finishStatus: string\n  processStatus: string\n}\n\nexport interface StepItemState {\n  uid: number\n  currentStatus: string\n  setIndex: (val: number) => void\n  calcProgress: (status: string) => void\n}\n\nexport interface IStepsInject {\n  props: IStepsProps\n  steps: Ref<StepItemState[]>\n}\n\nexport default defineComponent({\n  name: 'ElStep',\n  components: {\n    ElIcon,\n    Close,\n    Check,\n  },\n  props: {\n    title: {\n      type: String,\n      default: '',\n    },\n    icon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: '',\n    },\n    description: {\n      type: String,\n      default: '',\n    },\n    status: {\n      type: String,\n      default: '',\n      validator: (val: string): boolean =>\n        ['', 'wait', 'process', 'finish', 'error', 'success'].includes(val),\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('step')\n    const index = ref(-1)\n    const lineStyle = ref({})\n    const internalStatus = ref('')\n    const parent: IStepsInject = inject('ElSteps')\n    const currentInstance = getCurrentInstance()\n\n    onMounted(() => {\n      watch(\n        [\n          () => parent.props.active,\n          () => parent.props.processStatus,\n          () => parent.props.finishStatus,\n        ],\n        ([active]) => {\n          updateStatus(active)\n        },\n        { immediate: true }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter(\n        (instance) => instance.uid !== currentInstance.uid\n      )\n    })\n\n    const currentStatus = computed(() => {\n      return props.status || internalStatus.value\n    })\n    const prevStatus = computed(() => {\n      const prevStep = parent.steps.value[index.value - 1]\n      return prevStep ? prevStep.currentStatus : 'wait'\n    })\n    const isCenter = computed(() => {\n      return parent.props.alignCenter\n    })\n    const isVertical = computed(() => {\n      return parent.props.direction === 'vertical'\n    })\n    const isSimple = computed(() => {\n      return parent.props.simple\n    })\n    const stepsCount = computed(() => {\n      return parent.steps.value.length\n    })\n    const isLast = computed(() => {\n      return (\n        parent.steps.value[stepsCount.value - 1]?.uid === currentInstance.uid\n      )\n    })\n    const space = computed(() => {\n      return isSimple.value ? '' : parent.props.space\n    })\n    const style = computed(() => {\n      const style: Record<string, unknown> = {\n        flexBasis:\n          typeof space.value === 'number'\n            ? `${space.value}px`\n            : space.value\n            ? space.value\n            : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`,\n      }\n      if (isVertical.value) return style\n      if (isLast.value) {\n        style.maxWidth = `${100 / stepsCount.value}%`\n      }\n      return style\n    })\n\n    const setIndex = (val) => {\n      index.value = val\n    }\n    const calcProgress = (status) => {\n      let step = 100\n      const style: Record<string, unknown> = {}\n\n      style.transitionDelay = `${150 * index.value}ms`\n      if (status === parent.props.processStatus) {\n        step = 0\n      } else if (status === 'wait') {\n        step = 0\n        style.transitionDelay = `${-150 * index.value}ms`\n      }\n      style.borderWidth = step && !isSimple.value ? '1px' : 0\n      style[\n        parent.props.direction === 'vertical' ? 'height' : 'width'\n      ] = `${step}%`\n      lineStyle.value = style\n    }\n    const updateStatus = (activeIndex) => {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus\n      } else if (activeIndex === index.value && prevStatus.value !== 'error') {\n        internalStatus.value = parent.props.processStatus\n      } else {\n        internalStatus.value = 'wait'\n      }\n      const prevChild = parent.steps.value[stepsCount.value - 1]\n      if (prevChild) prevChild.calcProgress(internalStatus.value)\n    }\n\n    const stepItemState = reactive({\n      uid: computed(() => currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress,\n    })\n    parent.steps.value = [...parent.steps.value, stepItemState]\n\n    return {\n      ns,\n      index,\n      lineStyle,\n      currentStatus,\n      isCenter,\n      isVertical,\n      isSimple,\n      isLast,\n      space,\n      style,\n      parent,\n      setIndex,\n      calcProgress,\n      updateStatus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}