{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, resolveDirective, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, withModifiers, renderSlot, createElementVNode, toDisplayString, createCommentVNode, vShow } from 'vue';\nimport { Close } from '@element-plus/icons-vue';\nimport { ElOverlay } from '../../overlay/index2.mjs';\nimport '../../dialog/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport '../../../directives/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { drawerProps, drawerEmits } from './drawer3.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { useDialog } from '../../dialog/src/use-dialog2.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElDrawer\",\n  components: {\n    ElOverlay,\n    ElIcon,\n    Close\n  },\n  directives: {\n    TrapFocus\n  },\n  props: drawerProps,\n  emits: drawerEmits,\n\n  setup(props, ctx) {\n    const drawerRef = ref();\n    const ns = useNamespace(\"drawer\");\n    const isHorizontal = computed(() => props.direction === \"rtl\" || props.direction === \"ltr\");\n    const drawerSize = computed(() => typeof props.size === \"number\" ? `${props.size}px` : props.size);\n    return { ...useDialog(props, ctx, drawerRef),\n      drawerRef,\n      isHorizontal,\n      drawerSize,\n      ns\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-labelledby\", \"aria-label\"];\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = [\"title\"];\nconst _hoisted_4 = [\"aria-label\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_overlay = resolveComponent(\"el-overlay\");\n\n  const _directive_trap_focus = resolveDirective(\"trap-focus\");\n\n  return openBlock(), createBlock(Teleport, {\n    to: \"body\",\n    disabled: !_ctx.appendToBody\n  }, [createVNode(Transition, {\n    name: _ctx.ns.b(\"fade\"),\n    onAfterEnter: _ctx.afterEnter,\n    onAfterLeave: _ctx.afterLeave,\n    onBeforeLeave: _ctx.beforeLeave\n  }, {\n    default: withCtx(() => [withDirectives(createVNode(_component_el_overlay, {\n      mask: _ctx.modal,\n      \"overlay-class\": _ctx.modalClass,\n      \"z-index\": _ctx.zIndex,\n      onClick: _ctx.onModalClick\n    }, {\n      default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n        ref: \"drawerRef\",\n        \"aria-modal\": \"true\",\n        \"aria-labelledby\": _ctx.ns.e(\"title\"),\n        \"aria-label\": _ctx.title,\n        class: normalizeClass([_ctx.ns.b(), _ctx.direction, _ctx.visible && \"open\", _ctx.customClass]),\n        style: normalizeStyle(_ctx.isHorizontal ? \"width: \" + _ctx.drawerSize : \"height: \" + _ctx.drawerSize),\n        role: \"dialog\",\n        onClick: _cache[1] || (_cache[1] = withModifiers(() => {}, [\"stop\"]))\n      }, [_ctx.withHeader ? (openBlock(), createElementBlock(\"header\", {\n        key: 0,\n        id: _ctx.ns.e(\"title\"),\n        class: normalizeClass(_ctx.ns.e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createElementVNode(\"span\", {\n        role: \"heading\",\n        title: _ctx.title\n      }, toDisplayString(_ctx.title), 9, _hoisted_3)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        \"aria-label\": \"close \" + (_ctx.title || \"drawer\"),\n        class: normalizeClass(_ctx.ns.e(\"close-btn\")),\n        type: \"button\",\n        onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClose && _ctx.handleClose(...args))\n      }, [createVNode(_component_el_icon, {\n        class: normalizeClass(_ctx.ns.e(\"close\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_close)]),\n        _: 1\n      }, 8, [\"class\"])], 10, _hoisted_4)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_2)) : createCommentVNode(\"v-if\", true), _ctx.rendered ? (openBlock(), createElementBlock(\"section\", {\n        key: 1,\n        class: normalizeClass(_ctx.ns.e(\"body\"))\n      }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", {\n        key: 2,\n        class: normalizeClass(_ctx.ns.e(\"footer\"))\n      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 14, _hoisted_1)), [[_directive_trap_focus]])]),\n      _: 3\n    }, 8, [\"mask\", \"overlay-class\", \"z-index\", \"onClick\"]), [[vShow, _ctx.visible]])]),\n    _: 3\n  }, 8, [\"name\", \"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n}\n\nvar Drawer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/drawer/src/drawer.vue\"]]);\n\nexport { Drawer as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElOverlay","ElIcon","Close","directives","TrapFocus","props","emits","setup","ctx","drawerRef","ref","useNamespace","computed","direction","size","isHorizontal","drawerSize","ns","_createBlock","to","disabled","_ctx","_createVNode","b","onAfterEnter","onAfterLeave","onBeforeLeave","mask","onClick","_createElementBlock","e","class","_normalizeClass","style","role","_cache","key","id","_renderSlot","_createElementVNode","title","_toDisplayString","_hoisted_3","type","_createCommentVNode","footer","openBlock"],"sources":["../../../../../../packages/components/drawer/src/drawer.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      :name=\"ns.b('fade')\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n        @click=\"onModalClick\"\n      >\n        <div\n          ref=\"drawerRef\"\n          v-trap-focus\n          aria-modal=\"true\"\n          :aria-labelledby=\"ns.e('title')\"\n          :aria-label=\"title\"\n          :class=\"[ns.b(), direction, visible && 'open', customClass]\"\n          :style=\"\n            isHorizontal ? 'width: ' + drawerSize : 'height: ' + drawerSize\n          \"\n          role=\"dialog\"\n          @click.stop\n        >\n          <header v-if=\"withHeader\" :id=\"ns.e('title')\" :class=\"ns.e('header')\">\n            <slot name=\"title\">\n              <span role=\"heading\" :title=\"title\">\n                {{ title }}\n              </span>\n            </slot>\n            <button\n              v-if=\"showClose\"\n              :aria-label=\"'close ' + (title || 'drawer')\"\n              :class=\"ns.e('close-btn')\"\n              type=\"button\"\n              @click=\"handleClose\"\n            >\n              <el-icon :class=\"ns.e('close')\"><close /></el-icon>\n            </button>\n          </header>\n          <template v-if=\"rendered\">\n            <section :class=\"ns.e('body')\">\n              <slot />\n            </section>\n          </template>\n          <div v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n            <slot name=\"footer\" />\n          </div>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport { Close } from '@element-plus/icons-vue'\n\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDialog } from '@element-plus/components/dialog'\nimport ElIcon from '@element-plus/components/icon'\nimport { TrapFocus } from '@element-plus/directives'\nimport { useNamespace } from '@element-plus/hooks'\nimport { drawerEmits, drawerProps } from './drawer'\n\nexport default defineComponent({\n  name: 'ElDrawer',\n  components: {\n    ElOverlay,\n    ElIcon,\n    Close,\n  },\n  directives: {\n    TrapFocus,\n  },\n  props: drawerProps,\n  emits: drawerEmits,\n\n  setup(props, ctx) {\n    const drawerRef = ref<HTMLElement>()\n    const ns = useNamespace('drawer')\n\n    const isHorizontal = computed(\n      () => props.direction === 'rtl' || props.direction === 'ltr'\n    )\n    const drawerSize = computed(() =>\n      typeof props.size === 'number' ? `${props.size}px` : props.size\n    )\n\n    return {\n      ...useDialog(props, ctx, drawerRef),\n      drawerRef,\n      isHorizontal,\n      drawerSize,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}