{"ast":null,"code":"import { isVNode, defineComponent, provide, unref, createVNode, mergeProps } from 'vue';\nimport '../../../hooks/index2.mjs';\nimport { useTable } from './use-table2.mjs';\nimport { TableV2InjectionKey } from './tokens2.mjs';\nimport { tableV2Props } from './table2.mjs';\nimport MainTable from './renderers/main-table.mjs';\nimport LeftTable from './renderers/left-table.mjs';\nimport LeftTable$1 from './renderers/right-table.mjs';\nimport RowRenderer from './renderers/row.mjs';\nimport CellRenderer from './renderers/cell.mjs';\nimport HeaderRenderer from './renderers/header.mjs';\nimport HeaderCellRenderer from './renderers/header-cell.mjs';\nimport Footer from './renderers/footer.mjs';\nimport Footer$1 from './renderers/empty.mjs';\nimport Overlay from './renderers/overlay.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\n\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\n\nconst COMPONENT_NAME = \"ElTableV2\";\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const ns = useNamespace(\"table-v2\");\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n      showEmpty,\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll\n    } = useTable(props);\n    expose({\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow\n    });\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling\n    });\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width\n      } = props;\n\n      const _data = unref(data);\n\n      const mainTableProps = {\n        cache,\n        class: ns.e(\"main\"),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll\n      };\n      const leftColumnsWidth = unref(leftTableWidth);\n\n      const _fixedTableHeight = unref(fixedTableHeight);\n\n      const leftTableProps = {\n        cache,\n        class: ns.e(\"left\"),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n      const rightColumnsWidth = unref(rightTableWidth);\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize;\n      const rightTableProps = {\n        cache,\n        class: ns.e(\"right\"),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(ns.namespace)}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n\n      const _columnsStyles = unref(columnsStyles);\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange\n      };\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns\n      };\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles\n      };\n      const tableHeaderCellProps = {\n        ns,\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted\n      };\n      const tableSlots = {\n        row: props2 => createVNode(RowRenderer, mergeProps(props2, tableRowProps), {\n          row: slots.row,\n          cell: props3 => slots.cell ? createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), {\n            default: () => [slots.cell]\n          }) : createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), null)\n        }),\n        header: props2 => createVNode(HeaderRenderer, mergeProps(props2, tableHeaderProps), {\n          header: slots.header,\n          cell: props3 => slots[\"header-cell\"] ? createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), {\n            default: () => [slots[\"header-cell\"]]\n          }) : createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), null)\n        })\n      };\n      const rootKls = [props.class, ns.b(), ns.e(\"root\"), {\n        [ns.is(\"dynamic\")]: unref(isDynamic)\n      }];\n      const footerProps = {\n        class: ns.e(\"footer\"),\n        style: unref(footerHeight)\n      };\n      return createVNode(\"div\", {\n        \"class\": rootKls,\n        \"style\": unref(rootStyle)\n      }, [createVNode(MainTable, mainTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable, leftTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable$1, rightTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), slots.footer && createVNode(Footer, footerProps, {\n        default: slots.footer\n      }), unref(showEmpty) && createVNode(Footer$1, {\n        \"class\": ns.e(\"empty\"),\n        \"style\": unref(emptyStyle)\n      }, {\n        default: slots.empty\n      }), slots.overlay && createVNode(Overlay, {\n        \"class\": ns.e(\"overlay\")\n      }, {\n        default: slots.overlay\n      })]);\n    };\n  }\n\n});\nexport { TableV2 as default };","map":{"version":3,"mappings":"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","names":["Overlay","COMPONENT_NAME","TableV2","defineComponent","name","props","setup","useNamespace","slots","expose","fixedColumnsOnLeft","fixedColumnsOnRight","mainColumns","columnsStyles","mainTableHeight","fixedTableHeight","leftTableWidth","rightTableWidth","data","depthMap","expandedRowKeys","hasFixedColumns","hoveringRowKey","mainTableRef","leftTableRef","rightTableRef","isDynamic","isResetting","isScrolling","bodyWidth","emptyStyle","rootStyle","headerWidth","footerHeight","showEmpty","getRowHeight","scrollTo","scrollToLeft","scrollToTop","scrollToRow","onColumnSorted","onRowHeightChange","useTable","onRowExpanded","onRowsRendered","onScroll","onVerticalScroll","provide","ns","cache","cellProps","estimatedRowHeight","fixedData","headerHeight","headerClass","headerProps","headerCellProps","sortState","rowHeight","rowClass","rowEventHandlers","rowKey","scrollbarAlwaysOn","iconSize","useIsScrolling","vScrollbarSize","_data","expandColumnKey","sortBy","rowProps","indentSize","leftColumnsWidth","class","columns","unref","height","scrollbarStartGap","scrollbarEndGap","rightColumnsWidth","rightColumnsWidthWithScrollbar","_fixedTableHeight","_columnsStyles","width","style","tableHeaderCellProps","tableSlots","row","cell","default","tableCellProps","header","_createVNode","tableHeaderProps","footerProps","key"],"sources":["../../../../../../packages/components/table-v2/src/table-v2.tsx"],"sourcesContent":["import { defineComponent, provide, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useTable } from './use-table'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2Props } from './table'\n// renderers\nimport MainTable from './renderers/main-table'\nimport LeftTable from './renderers/left-table'\nimport RightTable from './renderers/right-table'\nimport Row from './renderers/row'\nimport Cell from './renderers/cell'\nimport Header from './renderers/header'\nimport HeaderCell from './renderers/header-cell'\nimport Footer from './renderers/footer'\nimport Empty from './renderers/empty'\nimport Overlay from './renderers/overlay'\n\nimport type { TableGridRowSlotParams } from './table-grid'\nimport type { ScrollStrategy } from './composables/use-scrollbar'\nimport type {\n  TableV2HeaderRendererParams,\n  TableV2HeaderRowCellRendererParams,\n  TableV2RowCellRenderParam,\n} from './components'\n\nconst COMPONENT_NAME = 'ElTableV2'\n\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n\n      showEmpty,\n\n      // exposes\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll,\n    } = useTable(props)\n\n    expose({\n      /**\n       * @description scroll to a given position\n       * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n       */\n      scrollTo,\n      /**\n       * @description scroll to a given position horizontally\n       * @params scrollLeft {Number} where to scroll to.\n       */\n      scrollToLeft,\n      /**\n       * @description scroll to a given position vertically\n       * @params scrollTop { Number } where to scroll to.\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n    })\n\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling,\n    })\n\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width,\n      } = props\n\n      const _data = unref(data)\n\n      const mainTableProps = {\n        cache,\n        class: ns.e('main'),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll,\n      }\n\n      const leftColumnsWidth = unref(leftTableWidth)\n      const _fixedTableHeight = unref(fixedTableHeight)\n\n      const leftTableProps = {\n        cache,\n        class: ns.e('left'),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n\n      const rightColumnsWidth = unref(rightTableWidth)\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize\n\n      const rightTableProps = {\n        cache,\n        class: ns.e('right'),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(\n          ns.namespace\n        )}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n      const _columnsStyles = unref(columnsStyles)\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange,\n      }\n\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns,\n      }\n\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles,\n      }\n\n      const tableHeaderCellProps = {\n        ns,\n\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted,\n      }\n\n      const tableSlots = {\n        row: (props: TableGridRowSlotParams) => (\n          <Row {...props} {...tableRowProps}>\n            {{\n              row: slots.row,\n              cell: (props: TableV2RowCellRenderParam) =>\n                slots.cell ? (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots.cell}\n                  </Cell>\n                ) : (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Row>\n        ),\n        header: (props: TableV2HeaderRendererParams) => (\n          <Header {...props} {...tableHeaderProps}>\n            {{\n              header: slots.header,\n              cell: (props: TableV2HeaderRowCellRendererParams) =>\n                slots['header-cell'] ? (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots['header-cell']}\n                  </HeaderCell>\n                ) : (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Header>\n        ),\n      }\n\n      const rootKls = [\n        props.class,\n        ns.b(),\n        ns.e('root'),\n        {\n          [ns.is('dynamic')]: unref(isDynamic),\n        },\n      ]\n\n      const footerProps = {\n        class: ns.e('footer'),\n        style: unref(footerHeight),\n      }\n\n      return (\n        <div class={rootKls} style={unref(rootStyle)}>\n          <MainTable {...mainTableProps}>{tableSlots}</MainTable>\n          <LeftTable {...leftTableProps}>{tableSlots}</LeftTable>\n          <RightTable {...rightTableProps}>{tableSlots}</RightTable>\n          {slots.footer && (\n            <Footer {...footerProps}>{{ default: slots.footer }}</Footer>\n          )}\n          {unref(showEmpty) && (\n            <Empty class={ns.e('empty')} style={unref(emptyStyle)}>\n              {{ default: slots.empty }}\n            </Empty>\n          )}\n          {slots.overlay && (\n            <Overlay class={ns.e('overlay')}>\n              {{ default: slots.overlay }}\n            </Overlay>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2\n\nexport type TableV2Instance = InstanceType<typeof TableV2> & {\n  /**\n   * @description scroll to a given position\n   * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n   */\n  scrollTo: (param: { scrollLeft?: number; scrollTop?: number }) => void\n  /**\n   * @description scroll to a given position horizontally\n   * @params scrollLeft {Number} where to scroll to.\n   */\n  scrollToLeft: (scrollLeft: number) => void\n  /**\n   * @description scroll to a given position vertically\n   * @params scrollTop { Number } where to scroll to.\n   */\n  scrollToTop: (scrollTop: number) => void\n  /**\n   * @description scroll to a given row\n   * @params row {Number} which row to scroll to\n   * @params strategy {ScrollStrategy} use what strategy to scroll to\n   */\n  scrollToRow(row: number, strategy?: ScrollStrategy): void\n}\n"]},"metadata":{},"sourceType":"module"}