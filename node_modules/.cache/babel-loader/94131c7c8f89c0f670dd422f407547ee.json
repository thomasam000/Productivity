{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router'; // import { findById } from '@/helpers'\n// import store from '@/store'\n\nconst routes = [{\n  path: '/',\n  name: 'Home',\n  component: () => import(\n  /* webpackChunkName: \"Home\" */\n  '@/pages/page-home')\n} //   {\n//     path: '/me',\n//     name: 'Profile',\n//     component: () => import(/* webpackChunkName: \"Profile\" */'@/pages/Profile'),\n//     meta: { toTop: true, smoothScroll: true, requiresAuth: true }\n//   },\n//   {\n//     path: '/me/edit',\n//     name: 'ProfileEdit',\n//     component: () => import(/* webpackChunkName: \"Profile\" */'@/pages/Profile'),\n//     props: { edit: true },\n//     meta: { requiresAuth: true }\n//   },\n//   {\n//     path: '/category/:id',\n//     name: 'Category',\n//     component: () => import(/* webpackChunkName: \"Category\" */'@/pages/Category'),\n//     props: true\n//   },\n//   {\n//     path: '/forum/:id',\n//     name: 'Forum',\n//     component: () => import(/* webpackChunkName: \"Forum\" */'@/pages/Forum'),\n//     props: true\n//   },\n//   {\n//     path: '/thread/:id',\n//     name: 'ThreadShow',\n//     component: () => import(/* webpackChunkName: \"ThreadShow\" */'@/pages/ThreadShow'),\n//     props: true,\n//     async beforeEnter (to, from, next) {\n//       await store.dispatch('threads/fetchThread', { id: to.params.id, once: true })\n//       // check if thread exists\n//       const threadExists = findById(store.state.threads.items, to.params.id)\n//       // if exists continue\n//       if (threadExists) {\n//         return next()\n//       } else {\n//         next({\n//           name: 'NotFound',\n//           params: { pathMatch: to.path.substring(1).split('/') },\n//           // preserve existing query and hash\n//           query: to.query,\n//           hash: to.hash\n//         })\n//       }\n//       // if doesnt exist redirect to not found\n//     }\n//   },\n//   {\n//     path: '/forum/:forumId/thread/create',\n//     name: 'ThreadCreate',\n//     component: () => import(/* webpackChunkName: \"ThreadCreate\" */'@/pages/ThreadCreate'),\n//     props: true,\n//     meta: { requiresAuth: true }\n//   },\n//   {\n//     path: '/thread/:id/edit',\n//     name: 'ThreadEdit',\n//     component: () => import(/* webpackChunkName: \"ThreadEdit\" */'@/pages/ThreadEdit'),\n//     props: true,\n//     meta: { requiresAuth: true }\n//   },\n//   {\n//     path: '/register',\n//     name: 'Register',\n//     component: () => import(/* webpackChunkName: \"Register\" */'@/pages/Register'),\n//     meta: { requiresGuest: true }\n//   },\n//   {\n//     path: '/signin',\n//     name: 'SignIn',\n//     component: () => import(/* webpackChunkName: \"SignIn\" */'@/pages/SignIn'),\n//     meta: { requiresGuest: true }\n//   },\n//   {\n//     path: '/logout',\n//     name: 'SignOut',\n//     async beforeEnter (to, from) {\n//       await store.dispatch('auth/signOut')\n//       return { name: 'Home' }\n//     }\n//   },\n//   {\n//     path: '/:pathMatch(.*)*',\n//     name: 'NotFound',\n//     component: () => import(/* webpackChunkName: \"NotFound\" */'@/pages/NotFound')\n//   }\n];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n\n  scrollBehavior(to) {\n    const scroll = {};\n    if (to.meta.toTop) scroll.top = 0;\n    if (to.meta.smoothScroll) scroll.behavior = 'smooth';\n    return scroll;\n  }\n\n}); // router.afterEach(() => {\n//   store.dispatch('clearItems', { modules: ['categories', 'forums', 'posts', 'threads'] })\n// })\n// router.beforeEach(async (to, from) => {\n//   await store.dispatch('auth/initAuthentication')\n//   store.dispatch('unsubscribeAllSnapshots')\n//   if (to.meta.requiresAuth && !store.state.auth.authId) {\n//     return { name: 'SignIn', query: { redirectTo: to.path } }\n//   }\n//   if (to.meta.requiresGuest && store.state.auth.authId) {\n//     return { name: 'Home' }\n//   }\n// })\n\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","routes","path","name","component","router","history","scrollBehavior","to","scroll","meta","toTop","top","smoothScroll","behavior"],"sources":["/Users/samuelthomas/Desktop/productivity-vue/productivity/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\n// import { findById } from '@/helpers'\n// import store from '@/store'\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: () => import(/* webpackChunkName: \"Home\" */ '@/pages/page-home')\n  },\n//   {\n//     path: '/me',\n//     name: 'Profile',\n//     component: () => import(/* webpackChunkName: \"Profile\" */'@/pages/Profile'),\n//     meta: { toTop: true, smoothScroll: true, requiresAuth: true }\n//   },\n//   {\n//     path: '/me/edit',\n//     name: 'ProfileEdit',\n//     component: () => import(/* webpackChunkName: \"Profile\" */'@/pages/Profile'),\n//     props: { edit: true },\n//     meta: { requiresAuth: true }\n//   },\n//   {\n//     path: '/category/:id',\n//     name: 'Category',\n//     component: () => import(/* webpackChunkName: \"Category\" */'@/pages/Category'),\n//     props: true\n//   },\n//   {\n//     path: '/forum/:id',\n//     name: 'Forum',\n//     component: () => import(/* webpackChunkName: \"Forum\" */'@/pages/Forum'),\n//     props: true\n//   },\n//   {\n//     path: '/thread/:id',\n//     name: 'ThreadShow',\n//     component: () => import(/* webpackChunkName: \"ThreadShow\" */'@/pages/ThreadShow'),\n//     props: true,\n//     async beforeEnter (to, from, next) {\n//       await store.dispatch('threads/fetchThread', { id: to.params.id, once: true })\n//       // check if thread exists\n//       const threadExists = findById(store.state.threads.items, to.params.id)\n//       // if exists continue\n//       if (threadExists) {\n//         return next()\n//       } else {\n//         next({\n//           name: 'NotFound',\n//           params: { pathMatch: to.path.substring(1).split('/') },\n//           // preserve existing query and hash\n//           query: to.query,\n//           hash: to.hash\n//         })\n//       }\n//       // if doesnt exist redirect to not found\n//     }\n//   },\n//   {\n//     path: '/forum/:forumId/thread/create',\n//     name: 'ThreadCreate',\n//     component: () => import(/* webpackChunkName: \"ThreadCreate\" */'@/pages/ThreadCreate'),\n//     props: true,\n//     meta: { requiresAuth: true }\n//   },\n//   {\n//     path: '/thread/:id/edit',\n//     name: 'ThreadEdit',\n//     component: () => import(/* webpackChunkName: \"ThreadEdit\" */'@/pages/ThreadEdit'),\n//     props: true,\n//     meta: { requiresAuth: true }\n//   },\n//   {\n//     path: '/register',\n//     name: 'Register',\n//     component: () => import(/* webpackChunkName: \"Register\" */'@/pages/Register'),\n//     meta: { requiresGuest: true }\n//   },\n//   {\n//     path: '/signin',\n//     name: 'SignIn',\n//     component: () => import(/* webpackChunkName: \"SignIn\" */'@/pages/SignIn'),\n//     meta: { requiresGuest: true }\n//   },\n//   {\n//     path: '/logout',\n//     name: 'SignOut',\n//     async beforeEnter (to, from) {\n//       await store.dispatch('auth/signOut')\n//       return { name: 'Home' }\n//     }\n//   },\n//   {\n//     path: '/:pathMatch(.*)*',\n//     name: 'NotFound',\n//     component: () => import(/* webpackChunkName: \"NotFound\" */'@/pages/NotFound')\n//   }\n]\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n  scrollBehavior (to) {\n    const scroll = {}\n    if (to.meta.toTop) scroll.top = 0\n    if (to.meta.smoothScroll) scroll.behavior = 'smooth'\n    return scroll\n  }\n})\n// router.afterEach(() => {\n//   store.dispatch('clearItems', { modules: ['categories', 'forums', 'posts', 'threads'] })\n// })\n\n// router.beforeEach(async (to, from) => {\n//   await store.dispatch('auth/initAuthentication')\n//   store.dispatch('unsubscribeAllSnapshots')\n//   if (to.meta.requiresAuth && !store.state.auth.authId) {\n//     return { name: 'SignIn', query: { redirectTo: to.path } }\n//   }\n//   if (to.meta.requiresGuest && store.state.auth.authId) {\n//     return { name: 'Home' }\n//   }\n// })\n\nexport default router\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,YAA/C,C,CACA;AACA;;AACA,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GADR;EAEEC,IAAI,EAAE,MAFR;EAGEC,SAAS,EAAE,MAAM;EAAO;EAA+B,mBAAtC;AAHnB,CADa,CAMf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7Fe,CAAf;AA+FA,MAAMC,MAAM,GAAGN,YAAY,CAAC;EAC1BO,OAAO,EAAEN,gBAAgB,EADC;EAE1BC,MAF0B;;EAG1BM,cAAc,CAAEC,EAAF,EAAM;IAClB,MAAMC,MAAM,GAAG,EAAf;IACA,IAAID,EAAE,CAACE,IAAH,CAAQC,KAAZ,EAAmBF,MAAM,CAACG,GAAP,GAAa,CAAb;IACnB,IAAIJ,EAAE,CAACE,IAAH,CAAQG,YAAZ,EAA0BJ,MAAM,CAACK,QAAP,GAAkB,QAAlB;IAC1B,OAAOL,MAAP;EACD;;AARyB,CAAD,CAA3B,C,CAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeJ,MAAf"},"metadata":{},"sourceType":"module"}