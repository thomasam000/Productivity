{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, nextTick, onMounted, onBeforeUnmount, toRefs, resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createVNode, createElementVNode, normalizeClass, createElementBlock, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, toDisplayString, withKeys, renderSlot, vShow, createTextVNode } from 'vue';\nimport { ElButton } from '../../button/index2.mjs';\nimport '../../../directives/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { ElInput } from '../../input/index2.mjs';\nimport { ElOverlay } from '../../overlay/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index2.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon2.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator2.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index2.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index2.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index2.mjs';\nimport { on, off } from '../../../utils/dom/event2.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index2.mjs';\nimport { useModal } from '../../../hooks/use-modal/index2.mjs';\nimport { usePreventGlobal } from '../../../hooks/use-prevent-global/index2.mjs';\nimport { EVENT_CODE } from '../../../constants/aria2.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index2.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index2.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElMessageBox\",\n  directives: {\n    TrapFocus\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean\n    },\n    container: {\n      type: String,\n      default: \"body\"\n    },\n    boxType: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"vanish\", \"action\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"message-box\");\n    const visible = ref(false);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const state = reactive({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: \"\",\n      cancelButtonClass: \"\",\n      confirmButtonText: \"\",\n      confirmButtonClass: \"\",\n      customClass: \"\",\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: \"\",\n      inputPattern: null,\n      inputPlaceholder: \"\",\n      inputType: \"text\",\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: \"\",\n      message: null,\n      modalFade: true,\n      modalClass: \"\",\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: \"\",\n      title: void 0,\n      showInput: false,\n      action: \"\",\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: \"\",\n      validateError: false,\n      zIndex: nextZIndex()\n    });\n    const typeClass = computed(() => {\n      const type = state.type;\n      return {\n        [ns.bm(\"icon\", type)]: type && TypeComponentsMap[type]\n      };\n    });\n    const btnSize = useSize(computed(() => props.buttonSize), {\n      prop: true,\n      form: true,\n      formItem: true\n    });\n    const iconComponent = computed(() => state.icon || TypeComponentsMap[state.type] || \"\");\n    const hasMessage = computed(() => !!state.message);\n    const rootRef = ref();\n    const headerRef = ref();\n    const inputRef = ref();\n    const confirmRef = ref();\n    const confirmButtonClasses = computed(() => state.confirmButtonClass);\n    watch(() => state.inputValue, async val => {\n      await nextTick();\n\n      if (props.boxType === \"prompt\" && val !== null) {\n        validate();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => visible.value, val => {\n      if (val) {\n        if (props.boxType === \"alert\" || props.boxType === \"confirm\") {\n          nextTick().then(() => {\n            var _a, _b, _c;\n\n            (_c = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus) == null ? void 0 : _c.call(_b);\n          });\n        }\n\n        state.zIndex = nextZIndex();\n      }\n\n      if (props.boxType !== \"prompt\") return;\n\n      if (val) {\n        nextTick().then(() => {\n          if (inputRef.value && inputRef.value.$el) {\n            getInputElement().focus();\n          }\n        });\n      } else {\n        state.editorErrorMessage = \"\";\n        state.validateError = false;\n      }\n    });\n    const draggable = computed(() => props.draggable);\n    useDraggable(rootRef, headerRef, draggable);\n    onMounted(async () => {\n      await nextTick();\n\n      if (props.closeOnHashChange) {\n        on(window, \"hashchange\", doClose);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, \"hashchange\", doClose);\n      }\n    });\n\n    function doClose() {\n      if (!visible.value) return;\n      visible.value = false;\n      nextTick(() => {\n        if (state.action) emit(\"action\", state.action);\n      });\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? \"close\" : \"cancel\");\n      }\n    };\n\n    const overlayEvent = useSameTarget(handleWrapperClick);\n\n    const handleInputEnter = e => {\n      if (state.inputType !== \"textarea\") {\n        e.preventDefault();\n        return handleAction(\"confirm\");\n      }\n    };\n\n    const handleAction = action => {\n      var _a;\n\n      if (props.boxType === \"prompt\" && action === \"confirm\" && !validate()) {\n        return;\n      }\n\n      state.action = action;\n\n      if (state.beforeClose) {\n        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);\n      } else {\n        doClose();\n      }\n    };\n\n    const validate = () => {\n      if (props.boxType === \"prompt\") {\n        const inputPattern = state.inputPattern;\n\n        if (inputPattern && !inputPattern.test(state.inputValue || \"\")) {\n          state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n          state.validateError = true;\n          return false;\n        }\n\n        const inputValidator = state.inputValidator;\n\n        if (typeof inputValidator === \"function\") {\n          const validateResult = inputValidator(state.inputValue);\n\n          if (validateResult === false) {\n            state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n            state.validateError = true;\n            return false;\n          }\n\n          if (typeof validateResult === \"string\") {\n            state.editorErrorMessage = validateResult;\n            state.validateError = true;\n            return false;\n          }\n        }\n      }\n\n      state.editorErrorMessage = \"\";\n      state.validateError = false;\n      return true;\n    };\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    };\n\n    const handleClose = () => {\n      handleAction(\"close\");\n    };\n\n    if (props.closeOnPressEscape) {\n      useModal({\n        handleClose\n      }, visible);\n    } else {\n      usePreventGlobal(visible, \"keydown\", e => e.code === EVENT_CODE.esc);\n    }\n\n    if (props.lockScroll) {\n      useLockscreen(visible);\n    }\n\n    useRestoreActive(visible);\n    return { ...toRefs(state),\n      ns,\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose,\n      handleClose,\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"innerHTML\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_el_overlay = resolveComponent(\"el-overlay\");\n\n  const _directive_trap_focus = resolveDirective(\"trap-focus\");\n\n  return openBlock(), createBlock(Transition, {\n    name: \"fade-in-linear\",\n    onAfterLeave: _cache[11] || (_cache[11] = $event => _ctx.$emit(\"vanish\"))\n  }, {\n    default: withCtx(() => [withDirectives(createVNode(_component_el_overlay, {\n      \"z-index\": _ctx.zIndex,\n      \"overlay-class\": [_ctx.ns.is(\"message-box\"), _ctx.modalClass],\n      mask: _ctx.modal\n    }, {\n      default: withCtx(() => [createElementVNode(\"div\", {\n        class: normalizeClass(`${_ctx.ns.namespace.value}-overlay-message-box`),\n        onClick: _cache[8] || (_cache[8] = (...args) => _ctx.overlayEvent.onClick && _ctx.overlayEvent.onClick(...args)),\n        onMousedown: _cache[9] || (_cache[9] = (...args) => _ctx.overlayEvent.onMousedown && _ctx.overlayEvent.onMousedown(...args)),\n        onMouseup: _cache[10] || (_cache[10] = (...args) => _ctx.overlayEvent.onMouseup && _ctx.overlayEvent.onMouseup(...args))\n      }, [withDirectives((openBlock(), createElementBlock(\"div\", {\n        ref: \"rootRef\",\n        role: \"dialog\",\n        \"aria-label\": _ctx.title || \"dialog\",\n        \"aria-modal\": \"true\",\n        class: normalizeClass([_ctx.ns.b(), _ctx.customClass, _ctx.ns.is(\"draggable\", _ctx.draggable), {\n          [_ctx.ns.m(\"center\")]: _ctx.center\n        }]),\n        style: normalizeStyle(_ctx.customStyle),\n        onClick: _cache[7] || (_cache[7] = withModifiers(() => {}, [\"stop\"]))\n      }, [_ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        ref: \"headerRef\",\n        class: normalizeClass(_ctx.ns.e(\"header\"))\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"title\"))\n      }, [_ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([_ctx.ns.e(\"status\"), _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", null, toDisplayString(_ctx.title), 1)], 2), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        class: normalizeClass(_ctx.ns.e(\"headerbtn\")),\n        \"aria-label\": \"Close\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\")),\n        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, [createVNode(_component_el_icon, {\n        class: normalizeClass(_ctx.ns.e(\"close\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_close)]),\n        _: 1\n      }, 8, [\"class\"])], 34)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"content\"))\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"container\"))\n      }, [_ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([_ctx.ns.e(\"status\"), _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.hasMessage ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(_ctx.ns.e(\"message\"))\n      }, [renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_2, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(\"p\", {\n        key: 1,\n        innerHTML: _ctx.message\n      }, null, 8, _hoisted_3))])], 2)) : createCommentVNode(\"v-if\", true)], 2), withDirectives(createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"input\"))\n      }, [createVNode(_component_el_input, {\n        ref: \"inputRef\",\n        modelValue: _ctx.inputValue,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.inputValue = $event),\n        type: _ctx.inputType,\n        placeholder: _ctx.inputPlaceholder,\n        class: normalizeClass({\n          invalid: _ctx.validateError\n        }),\n        onKeydown: withKeys(_ctx.handleInputEnter, [\"enter\"])\n      }, null, 8, [\"modelValue\", \"type\", \"placeholder\", \"class\", \"onKeydown\"]), createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"errormsg\")),\n        style: normalizeStyle({\n          visibility: !!_ctx.editorErrorMessage ? \"visible\" : \"hidden\"\n        })\n      }, toDisplayString(_ctx.editorErrorMessage), 7)], 2), [[vShow, _ctx.showInput]])], 2), createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"btns\"))\n      }, [_ctx.showCancelButton ? (openBlock(), createBlock(_component_el_button, {\n        key: 0,\n        loading: _ctx.cancelButtonLoading,\n        class: normalizeClass([_ctx.cancelButtonClass]),\n        round: _ctx.roundButton,\n        size: _ctx.btnSize,\n        onClick: _cache[3] || (_cache[3] = $event => _ctx.handleAction(\"cancel\")),\n        onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers($event => _ctx.handleAction(\"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.cancelButtonText || _ctx.t(\"el.messagebox.cancel\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"size\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_button, {\n        ref: \"confirmRef\",\n        type: \"primary\",\n        loading: _ctx.confirmButtonLoading,\n        class: normalizeClass([_ctx.confirmButtonClasses]),\n        round: _ctx.roundButton,\n        disabled: _ctx.confirmButtonDisabled,\n        size: _ctx.btnSize,\n        onClick: _cache[5] || (_cache[5] = $event => _ctx.handleAction(\"confirm\")),\n        onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers($event => _ctx.handleAction(\"confirm\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.confirmButtonText || _ctx.t(\"el.messagebox.confirm\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"disabled\", \"size\"]), [[vShow, _ctx.showConfirmButton]])], 2)], 14, _hoisted_1)), [[_directive_trap_focus]])], 34)]),\n      _: 3\n    }, 8, [\"z-index\", \"overlay-class\", \"mask\"]), [[vShow, _ctx.visible]])]),\n    _: 3\n  });\n}\n\nvar MessageBoxConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/message-box/src/index.vue\"]]);\n\nexport { MessageBoxConstructor as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","directives","TrapFocus","components","ElButton","ElInput","ElOverlay","ElIcon","inheritAttrs","props","buttonSize","type","validator","modal","default","lockScroll","showClose","closeOnClickModal","closeOnPressEscape","closeOnHashChange","center","draggable","roundButton","container","boxType","emits","setup","emit","t","useLocale","useNamespace","ref","nextZIndex","useZIndex","state","reactive","beforeClose","callback","cancelButtonText","cancelButtonClass","confirmButtonText","confirmButtonClass","customClass","customStyle","dangerouslyUseHTMLString","distinguishCancelAndClose","icon","inputPattern","inputPlaceholder","inputType","inputValue","inputValidator","inputErrorMessage","message","modalFade","modalClass","showCancelButton","showConfirmButton","title","showInput","action","confirmButtonLoading","cancelButtonLoading","confirmButtonDisabled","editorErrorMessage","validateError","zIndex","computed","ns","bm","TypeComponentsMap","btnSize","prop","form","formItem","hasMessage","rootRef","headerRef","inputRef","confirmRef","confirmButtonClasses","watch","val","nextTick","validate","immediate","visible","value","then","getInputElement","useDraggable","onMounted","on","onBeforeUnmount","off","doClose","handleWrapperClick","handleAction","e","validateResult","inputRefs","useModal","handleClose","usePreventGlobal","useLockscreen","useRestoreActive","overlayEvent","typeClass","iconComponent","handleInputEnter","_directive_trap_focus","_openBlock","_ctx","_createElementVNode","class","onClick","onMousedown","_withDirectives","role","b","style","key","_createBlock","_","_createCommentVNode","_toDisplayString","onKeydown","_createVNode","_createElementBlock","_renderSlot","modelValue","_cache","placeholder","invalid","loading","round","size","disabled"],"sources":["../../../../../../packages/components/message-box/src/index.vue"],"sourcesContent":["<template>\n  <transition name=\"fade-in-linear\" @after-leave=\"$emit('vanish')\">\n    <el-overlay\n      v-show=\"visible\"\n      :z-index=\"zIndex\"\n      :overlay-class=\"[ns.is('message-box'), modalClass]\"\n      :mask=\"modal\"\n    >\n      <div\n        :class=\"`${ns.namespace.value}-overlay-message-box`\"\n        @click=\"overlayEvent.onClick\"\n        @mousedown=\"overlayEvent.onMousedown\"\n        @mouseup=\"overlayEvent.onMouseup\"\n      >\n        <div\n          ref=\"rootRef\"\n          v-trap-focus\n          role=\"dialog\"\n          :aria-label=\"title || 'dialog'\"\n          aria-modal=\"true\"\n          :class=\"[\n            ns.b(),\n            customClass,\n            ns.is('draggable', draggable),\n            { [ns.m('center')]: center },\n          ]\"\n          :style=\"customStyle\"\n          @click.stop=\"\"\n        >\n          <div\n            v-if=\"title !== null && title !== undefined\"\n            ref=\"headerRef\"\n            :class=\"ns.e('header')\"\n          >\n            <div :class=\"ns.e('title')\">\n              <el-icon\n                v-if=\"iconComponent && center\"\n                :class=\"[ns.e('status'), typeClass]\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <span>{{ title }}</span>\n            </div>\n            <button\n              v-if=\"showClose\"\n              type=\"button\"\n              :class=\"ns.e('headerbtn')\"\n              aria-label=\"Close\"\n              @click=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n              @keydown.prevent.enter=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n            >\n              <el-icon :class=\"ns.e('close')\">\n                <close />\n              </el-icon>\n            </button>\n          </div>\n          <div :class=\"ns.e('content')\">\n            <div :class=\"ns.e('container')\">\n              <el-icon\n                v-if=\"iconComponent && !center && hasMessage\"\n                :class=\"[ns.e('status'), typeClass]\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <div v-if=\"hasMessage\" :class=\"ns.e('message')\">\n                <slot>\n                  <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n                  <p v-else v-html=\"message\" />\n                </slot>\n              </div>\n            </div>\n            <div v-show=\"showInput\" :class=\"ns.e('input')\">\n              <el-input\n                ref=\"inputRef\"\n                v-model=\"inputValue\"\n                :type=\"inputType\"\n                :placeholder=\"inputPlaceholder\"\n                :class=\"{ invalid: validateError }\"\n                @keydown.enter=\"handleInputEnter\"\n              />\n              <div\n                :class=\"ns.e('errormsg')\"\n                :style=\"{\n                  visibility: !!editorErrorMessage ? 'visible' : 'hidden',\n                }\"\n              >\n                {{ editorErrorMessage }}\n              </div>\n            </div>\n          </div>\n          <div :class=\"ns.e('btns')\">\n            <el-button\n              v-if=\"showCancelButton\"\n              :loading=\"cancelButtonLoading\"\n              :class=\"[cancelButtonClass]\"\n              :round=\"roundButton\"\n              :size=\"btnSize\"\n              @click=\"handleAction('cancel')\"\n              @keydown.prevent.enter=\"handleAction('cancel')\"\n            >\n              {{ cancelButtonText || t('el.messagebox.cancel') }}\n            </el-button>\n            <el-button\n              v-show=\"showConfirmButton\"\n              ref=\"confirmRef\"\n              type=\"primary\"\n              :loading=\"confirmButtonLoading\"\n              :class=\"[confirmButtonClasses]\"\n              :round=\"roundButton\"\n              :disabled=\"confirmButtonDisabled\"\n              :size=\"btnSize\"\n              @click=\"handleAction('confirm')\"\n              @keydown.prevent.enter=\"handleAction('confirm')\"\n            >\n              {{ confirmButtonText || t('el.messagebox.confirm') }}\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </el-overlay>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport { TrapFocus } from '@element-plus/directives'\nimport {\n  useDraggable,\n  useLocale,\n  useLockscreen,\n  useModal,\n  useNamespace,\n  usePreventGlobal,\n  useRestoreActive,\n  useSameTarget,\n  useSize,\n  useZIndex,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport {\n  TypeComponents,\n  TypeComponentsMap,\n  isValidComponentSize,\n  off,\n  on,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type {\n  Action,\n  MessageBoxState,\n  MessageBoxType,\n} from './message-box.type'\n\nexport default defineComponent({\n  name: 'ElMessageBox',\n  directives: {\n    TrapFocus,\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents,\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    modal: {\n      type: Boolean,\n      default: true,\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true,\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true,\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean,\n    },\n    container: {\n      type: String, // default append to body\n      default: 'body',\n    },\n    boxType: {\n      type: String as PropType<MessageBoxType>,\n      default: '',\n    },\n  },\n  emits: ['vanish', 'action'],\n  setup(props, { emit }) {\n    // const popup = usePopup(props, doClose)\n    const { t } = useLocale()\n    const ns = useNamespace('message-box')\n    const visible = ref(false)\n    const { nextZIndex } = useZIndex()\n    // s represents state\n    const state = reactive<MessageBoxState>({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: '',\n      cancelButtonClass: '',\n      confirmButtonText: '',\n      confirmButtonClass: '',\n      customClass: '',\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: '',\n      inputPattern: null,\n      inputPlaceholder: '',\n      inputType: 'text',\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: '',\n      message: null,\n      modalFade: true,\n      modalClass: '',\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: '',\n      title: undefined,\n      showInput: false,\n      action: '' as Action,\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: '',\n      // refer to: https://github.com/ElemeFE/element/commit/2999279ae34ef10c373ca795c87b020ed6753eed\n      // seemed ok for now without this state.\n      // isOnComposition: false, // temporary remove\n      validateError: false,\n      zIndex: nextZIndex(),\n    })\n\n    const typeClass = computed(() => {\n      const type = state.type\n      return { [ns.bm('icon', type)]: type && TypeComponentsMap[type] }\n    })\n\n    const btnSize = useSize(\n      computed(() => props.buttonSize),\n      { prop: true, form: true, formItem: true }\n    )\n\n    const iconComponent = computed(\n      () => state.icon || TypeComponentsMap[state.type] || ''\n    )\n    const hasMessage = computed(() => !!state.message)\n    const rootRef = ref<HTMLElement>()\n    const headerRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLElement>()\n    const confirmRef = ref<HTMLElement>()\n\n    const confirmButtonClasses = computed(() => state.confirmButtonClass)\n\n    watch(\n      () => state.inputValue,\n      async (val) => {\n        await nextTick()\n        if (props.boxType === 'prompt' && val !== null) {\n          validate()\n        }\n      },\n      { immediate: true }\n    )\n\n    watch(\n      () => visible.value,\n      (val) => {\n        if (val) {\n          if (props.boxType === 'alert' || props.boxType === 'confirm') {\n            nextTick().then(() => {\n              confirmRef.value?.$el?.focus?.()\n            })\n          }\n          state.zIndex = nextZIndex()\n        }\n        if (props.boxType !== 'prompt') return\n        if (val) {\n          nextTick().then(() => {\n            if (inputRef.value && inputRef.value.$el) {\n              getInputElement().focus()\n            }\n          })\n        } else {\n          state.editorErrorMessage = ''\n          state.validateError = false\n        }\n      }\n    )\n\n    const draggable = computed(() => props.draggable)\n    useDraggable(rootRef, headerRef, draggable)\n\n    onMounted(async () => {\n      await nextTick()\n      if (props.closeOnHashChange) {\n        on(window, 'hashchange', doClose)\n      }\n    })\n\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, 'hashchange', doClose)\n      }\n    })\n\n    function doClose() {\n      if (!visible.value) return\n      visible.value = false\n      nextTick(() => {\n        if (state.action) emit('action', state.action)\n      })\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? 'close' : 'cancel')\n      }\n    }\n\n    const overlayEvent = useSameTarget(handleWrapperClick)\n\n    const handleInputEnter = (e: KeyboardEvent) => {\n      if (state.inputType !== 'textarea') {\n        e.preventDefault()\n        return handleAction('confirm')\n      }\n    }\n\n    const handleAction = (action: Action) => {\n      if (props.boxType === 'prompt' && action === 'confirm' && !validate()) {\n        return\n      }\n\n      state.action = action\n\n      if (state.beforeClose) {\n        state.beforeClose?.(action, state, doClose)\n      } else {\n        doClose()\n      }\n    }\n\n    const validate = () => {\n      if (props.boxType === 'prompt') {\n        const inputPattern = state.inputPattern\n        if (inputPattern && !inputPattern.test(state.inputValue || '')) {\n          state.editorErrorMessage =\n            state.inputErrorMessage || t('el.messagebox.error')\n          state.validateError = true\n          return false\n        }\n        const inputValidator = state.inputValidator\n        if (typeof inputValidator === 'function') {\n          const validateResult = inputValidator(state.inputValue)\n          if (validateResult === false) {\n            state.editorErrorMessage =\n              state.inputErrorMessage || t('el.messagebox.error')\n            state.validateError = true\n            return false\n          }\n          if (typeof validateResult === 'string') {\n            state.editorErrorMessage = validateResult\n            state.validateError = true\n            return false\n          }\n        }\n      }\n      state.editorErrorMessage = ''\n      state.validateError = false\n      return true\n    }\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs\n      return (inputRefs.input || inputRefs.textarea) as HTMLElement\n    }\n\n    const handleClose = () => {\n      handleAction('close')\n    }\n\n    // when close on press escape is disabled, pressing esc should not callout\n    // any other message box and close any other dialog-ish elements\n    // e.g. Dialog has a close on press esc feature, and when it closes, it calls\n    // props.beforeClose method to make a intermediate state by callout a message box\n    // for some verification or alerting. then if we allow global event liek this\n    // to dispatch, it could callout another message box.\n    if (props.closeOnPressEscape) {\n      useModal(\n        {\n          handleClose,\n        },\n        visible\n      )\n    } else {\n      usePreventGlobal(\n        visible,\n        'keydown',\n        (e: KeyboardEvent) => e.code === EVENT_CODE.esc\n      )\n    }\n\n    // locks the screen to prevent scroll\n    if (props.lockScroll) {\n      useLockscreen(visible)\n    }\n\n    // restore to prev active element.\n    useRestoreActive(visible)\n\n    return {\n      ...toRefs(state),\n      ns,\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose, // for outside usage\n      handleClose, // for out side usage\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}