{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport '../../../directives/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { ElInput } from '../../input/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number3.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../directives/repeat-click/index2.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index2.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { isUndefined } from '../../../utils/types2.mjs';\nimport { debugWarn } from '../../../utils/error2.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index2.mjs';\nimport { isNumber } from '@vueuse/core';\n\nconst _sfc_main = defineComponent({\n  name: \"ElInputNumber\",\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus\n  },\n  directives: {\n    RepeatClick\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      t\n    } = useLocale();\n    const {\n      formItem\n    } = useFormItem();\n    const ns = useNamespace(\"input-number\");\n    const minDisabled = computed(() => ensurePrecision(props.modelValue, -1) < props.min);\n    const maxDisabled = computed(() => ensurePrecision(props.modelValue) > props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useSize();\n    const inputNumberDisabled = useDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n\n      let currentValue = data.currentValue;\n\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n\n      return currentValue;\n    });\n\n    const toPrecision = (num, pre) => {\n      if (isUndefined(pre)) pre = numPrecision.value;\n      const digits = num.toString().split(\".\");\n\n      if (digits.length > 1) {\n        const integer = digits[0];\n        const decimal = Math.round(+digits[1] / 10 ** (digits[1].length - pre));\n        return Number.parseFloat(`${integer}.${decimal}`);\n      }\n\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`);\n    };\n\n    const getPrecision = value => {\n      if (isUndefined(value)) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n\n      return precision;\n    };\n\n    const ensurePrecision = (val, coefficient = 1) => {\n      if (!isNumber(val)) return data.currentValue;\n      val = isNumber(val) ? val : Number.NaN;\n      return toPrecision(val + props.step * coefficient);\n    };\n\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = ensurePrecision(value);\n      setCurrentValue(newVal);\n    };\n\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = ensurePrecision(value, -1);\n      setCurrentValue(newVal);\n    };\n\n    const verifyValue = (value, update) => {\n      const {\n        max,\n        min,\n        step,\n        precision,\n        stepStrictly\n      } = props;\n      let newVal = Number(value);\n\n      if (value === null) {\n        newVal = Number.NaN;\n      }\n\n      if (!Number.isNaN(newVal)) {\n        if (stepStrictly) {\n          newVal = Math.round(newVal / step) * step;\n        }\n\n        if (!isUndefined(precision)) {\n          newVal = toPrecision(newVal, precision);\n        }\n\n        if (newVal > max || newVal < min) {\n          newVal = newVal > max ? max : min;\n          update && emit(\"update:modelValue\", newVal);\n        }\n      }\n\n      return newVal;\n    };\n\n    const setCurrentValue = value => {\n      var _a;\n\n      const oldVal = data.currentValue;\n      let newVal = verifyValue(value);\n      if (oldVal === newVal) return;\n\n      if (Number.isNaN(newVal)) {\n        newVal = void 0;\n      }\n\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      data.currentValue = newVal;\n    };\n\n    const handleInput = value => {\n      return data.userInput = value;\n    };\n\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n\n      data.userInput = null;\n    };\n\n    const focus = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    const blur = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n\n    const handleBlur = event => {\n      var _a;\n\n      emit(\"blur\", event);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n    };\n\n    watch(() => props.modelValue, value => {\n      const newVal = verifyValue(value, true);\n      data.currentValue = newVal;\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n\n      if (Number.isFinite(props.max)) {\n        innerInput.setAttribute(\"aria-valuemax\", String(props.max));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemax\");\n      }\n\n      if (Number.isFinite(props.min)) {\n        innerInput.setAttribute(\"aria-valuemin\", String(props.min));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemin\");\n      }\n\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n\n      if (!isNumber(props.modelValue)) {\n        let val = Number(props.modelValue);\n\n        if (Number.isNaN(val)) {\n          val = void 0;\n        }\n\n        emit(\"update:modelValue\", val);\n      }\n    });\n    onUpdated(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", data.currentValue);\n    });\n    return {\n      t,\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = [\"aria-label\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_minus = resolveComponent(\"minus\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n\n  const _component_plus = resolveComponent(\"plus\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.inputNumberSize), _ctx.ns.is(\"disabled\", _ctx.inputNumberDisabled), _ctx.ns.is(\"without-controls\", !_ctx.controls), _ctx.ns.is(\"controls-right\", _ctx.controlsAtRight)]),\n    onDragstart: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"prevent\"]))\n  }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    role: \"button\",\n    \"aria-label\": _ctx.t(\"el.inputNumber.decrease\"),\n    class: normalizeClass([_ctx.ns.e(\"decrease\"), _ctx.ns.is(\"disabled\", _ctx.minDisabled)]),\n    onKeydown: _cache[0] || (_cache[0] = withKeys((...args) => _ctx.decrease && _ctx.decrease(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_down, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_minus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 42, _hoisted_1)), [[_directive_repeat_click, _ctx.decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    role: \"button\",\n    \"aria-label\": _ctx.t(\"el.inputNumber.increase\"),\n    class: normalizeClass([_ctx.ns.e(\"increase\"), _ctx.ns.is(\"disabled\", _ctx.maxDisabled)]),\n    onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.increase && _ctx.increase(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_up, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_plus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 42, _hoisted_2)), [[_directive_repeat_click, _ctx.increase]]) : createCommentVNode(\"v-if\", true), createVNode(_component_el_input, {\n    id: _ctx.id,\n    ref: \"input\",\n    type: \"number\",\n    step: _ctx.step,\n    \"model-value\": _ctx.displayValue,\n    placeholder: _ctx.placeholder,\n    disabled: _ctx.inputNumberDisabled,\n    size: _ctx.inputNumberSize,\n    max: _ctx.max,\n    min: _ctx.min,\n    name: _ctx.name,\n    label: _ctx.label,\n    \"validate-event\": false,\n    onKeydown: [withKeys(withModifiers(_ctx.increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(_ctx.decrease, [\"prevent\"]), [\"down\"])],\n    onBlur: _ctx.handleBlur,\n    onFocus: _ctx.handleFocus,\n    onInput: _ctx.handleInput,\n    onChange: _ctx.handleInputChange\n  }, null, 8, [\"id\", \"step\", \"model-value\", \"placeholder\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\", \"onBlur\", \"onFocus\", \"onInput\", \"onChange\"])], 34);\n}\n\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue\"]]);\n\nexport { InputNumber as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInput","ElIcon","ArrowUp","ArrowDown","Plus","Minus","directives","RepeatClick","props","emits","setup","emit","input","ref","data","reactive","currentValue","userInput","t","useLocale","formItem","useFormItem","useNamespace","computed","ensurePrecision","modelValue","min","max","getPrecision","step","isUndefined","precision","debugWarn","Math","stepPrecision","controls","controlsPosition","inputNumberSize","useSize","inputNumberDisabled","useDisabled","isNaN","toFixed","num","pre","numPrecision","digits","toString","split","length","integer","Number","decimal","parseFloat","value","valueString","dotPosition","val","coefficient","isNumber","toPrecision","increase","maxDisabled","setCurrentValue","newVal","decrease","minDisabled","update","stepStrictly","oldVal","_a","_b","event","watch","immediate","onMounted","innerInput","setAttribute","String","removeAttribute","isFinite","onUpdated","displayValue","handleInput","handleInputChange","controlsAtRight","focus","blur","_component_el_icon","_resolveComponent","class","_ctx","onDragstart","_cache","key","role","_","_hoisted_1","_createCommentVNode","_hoisted_2","_directive_repeat_click","_createVNode","id","type","placeholder","disabled","size","label","onKeydown","_withKeys"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.decrease')\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.increase')\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      :id=\"id\"\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  onMounted,\n  onUpdated,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\n\nimport { ElIcon } from '@element-plus/components/icon'\nimport { RepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { debugWarn, isNumber, isUndefined } from '@element-plus/utils'\nimport { ArrowDown, ArrowUp, Minus, Plus } from '@element-plus/icons-vue'\nimport { inputNumberEmits, inputNumberProps } from './input-number'\n\nimport type { ComponentPublicInstance } from 'vue'\n\ninterface IData {\n  currentValue: number | undefined\n  userInput: null | number | string\n}\n\nexport default defineComponent({\n  name: 'ElInputNumber',\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus,\n  },\n  directives: {\n    RepeatClick,\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, { emit }) {\n    const input = ref<ComponentPublicInstance<typeof ElInput>>()\n    const data = reactive<IData>({\n      currentValue: props.modelValue,\n      userInput: null,\n    })\n    const { t } = useLocale()\n    const { formItem } = useFormItem()\n    const ns = useNamespace('input-number')\n\n    const minDisabled = computed(\n      () => ensurePrecision(props.modelValue, -1) < props.min\n    )\n    const maxDisabled = computed(\n      () => ensurePrecision(props.modelValue) > props.max\n    )\n\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step)\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\n            'InputNumber',\n            'precision should not be less than the decimal places of step'\n          )\n        }\n        return props.precision\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision)\n      }\n    })\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === 'right'\n    })\n\n    const inputNumberSize = useSize()\n    const inputNumberDisabled = useDisabled()\n\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput\n      }\n      let currentValue: number | string | undefined = data.currentValue\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return ''\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision)\n        }\n      }\n      return currentValue\n    })\n    const toPrecision = (num: number, pre?: number) => {\n      if (isUndefined(pre)) pre = numPrecision.value\n      const digits = num.toString().split('.')\n      if (digits.length > 1) {\n        const integer = digits[0]\n        const decimal = Math.round(+digits[1] / 10 ** (digits[1].length - pre))\n        return Number.parseFloat(`${integer}.${decimal}`)\n      }\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`)\n    }\n    const getPrecision = (value: number | undefined) => {\n      if (isUndefined(value)) return 0\n      const valueString = value.toString()\n      const dotPosition = valueString.indexOf('.')\n      let precision = 0\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1\n      }\n      return precision\n    }\n    const ensurePrecision = (val: number, coefficient: 1 | -1 = 1) => {\n      if (!isNumber(val)) return data.currentValue\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : Number.NaN\n      return toPrecision(val + props.step * coefficient)\n    }\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = ensurePrecision(value)\n      setCurrentValue(newVal)\n    }\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = ensurePrecision(value, -1)\n      setCurrentValue(newVal)\n    }\n    const verifyValue = (\n      value: number | string | undefined,\n      update?: boolean\n    ): number | undefined => {\n      const { max, min, step, precision, stepStrictly } = props\n      let newVal = Number(value)\n      if (value === null) {\n        newVal = Number.NaN\n      }\n      if (!Number.isNaN(newVal)) {\n        if (stepStrictly) {\n          newVal = Math.round(newVal / step) * step\n        }\n        if (!isUndefined(precision)) {\n          newVal = toPrecision(newVal, precision)\n        }\n        if (newVal > max || newVal < min) {\n          newVal = newVal > max ? max : min\n          update && emit('update:modelValue', newVal)\n        }\n      }\n      return newVal\n    }\n    const setCurrentValue = (value: number | string | undefined) => {\n      const oldVal = data.currentValue\n      let newVal = verifyValue(value)\n      if (oldVal === newVal) return\n      if (Number.isNaN(newVal)) {\n        newVal = undefined\n      }\n      data.userInput = null\n      emit('update:modelValue', newVal)\n      emit('input', newVal)\n      emit('change', newVal, oldVal)\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n      data.currentValue = newVal\n    }\n    const handleInput = (value: string) => {\n      return (data.userInput = value)\n    }\n    const handleInputChange = (value: string) => {\n      const newVal = value !== '' ? Number(value) : ''\n      if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n        setCurrentValue(newVal)\n      }\n      data.userInput = null\n    }\n\n    const focus = () => {\n      input.value?.focus?.()\n    }\n\n    const blur = () => {\n      input.value?.blur?.()\n    }\n\n    const handleFocus = (event: MouseEvent | FocusEvent) => {\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: MouseEvent | FocusEvent) => {\n      emit('blur', event)\n      formItem?.validate?.('blur').catch((err) => debugWarn(err))\n    }\n\n    watch(\n      () => props.modelValue,\n      (value) => {\n        const newVal = verifyValue(value, true)\n        data.currentValue = newVal\n        data.userInput = null\n      },\n      { immediate: true }\n    )\n    onMounted(() => {\n      const innerInput = input.value?.input as HTMLInputElement\n      innerInput.setAttribute('role', 'spinbutton')\n      if (Number.isFinite(props.max)) {\n        innerInput.setAttribute('aria-valuemax', String(props.max))\n      } else {\n        innerInput.removeAttribute('aria-valuemax')\n      }\n      if (Number.isFinite(props.min)) {\n        innerInput.setAttribute('aria-valuemin', String(props.min))\n      } else {\n        innerInput.removeAttribute('aria-valuemin')\n      }\n      innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n      innerInput.setAttribute(\n        'aria-disabled',\n        String(inputNumberDisabled.value)\n      )\n      if (!isNumber(props.modelValue)) {\n        let val: number | undefined = Number(props.modelValue)\n        if (Number.isNaN(val)) {\n          val = undefined\n        }\n        emit('update:modelValue', val)\n      }\n    })\n    onUpdated(() => {\n      const innerInput = input.value?.input\n      innerInput?.setAttribute('aria-valuenow', data.currentValue)\n    })\n    return {\n      t,\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}