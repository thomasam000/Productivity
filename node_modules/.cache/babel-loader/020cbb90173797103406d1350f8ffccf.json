{"ast":null,"code":"import { defineComponent, ref, computed, openBlock, createElementBlock, createElementVNode, Fragment, renderList, normalizeClass, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index2.mjs';\nimport '../../../time-picker/index2.mjs';\nimport '../../../../utils/index2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../../time-picker/src/common/date-utils2.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { castArray } from '../../../../utils/arrays2.mjs';\nimport { hasClass } from '../../../../utils/dom/style2.mjs';\n\nconst datesInMonth = (year, month, lang) => {\n  const firstDay = dayjs().locale(lang).startOf(\"month\").month(month).year(year);\n  const numOfDays = firstDay.daysInMonth();\n  return rangeArr(numOfDays).map(n => firstDay.add(n, \"day\").toDate());\n};\n\nconst _sfc_main = defineComponent({\n  props: {\n    disabledDate: {\n      type: Function\n    },\n    selectionMode: {\n      type: String,\n      default: \"month\"\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    date: {\n      type: Object\n    },\n    parsedValue: {\n      type: Object\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false\n      })\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const months = ref(props.date.locale(\"en\").localeData().monthsShort().map(_ => _.toLowerCase()));\n    const tableRows = ref([[], [], []]);\n    const lastRow = ref(null);\n    const lastColumn = ref(null);\n    const rows = computed(() => {\n      var _a;\n\n      const rows2 = tableRows.value;\n      const now = dayjs().locale(lang.value).startOf(\"month\");\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows2[i];\n\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j];\n\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n\n          cell.type = \"normal\";\n          const index = i * 4 + j;\n          const calTime = props.date.startOf(\"year\").month(index);\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"month\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"month\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"month\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"month\");\n\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"month\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"month\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"month\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"month\");\n          }\n\n          const isToday = now.isSame(calTime);\n\n          if (isToday) {\n            cell.type = \"today\";\n          }\n\n          cell.text = index;\n          const cellDate = calTime.toDate();\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          row[j] = cell;\n        }\n      }\n\n      return rows2;\n    });\n\n    const getCellStyle = cell => {\n      const style = {};\n      const year = props.date.year();\n      const today = new Date();\n      const month = cell.text;\n      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;\n      style.current = castArray(props.parsedValue).findIndex(date => date.year() === year && date.month() === month) >= 0;\n      style.today = today.getFullYear() === year && today.getMonth() === month;\n\n      if (cell.inRange) {\n        style[\"in-range\"] = true;\n\n        if (cell.start) {\n          style[\"start-date\"] = true;\n        }\n\n        if (cell.end) {\n          style[\"end-date\"] = true;\n        }\n      }\n\n      return style;\n    };\n\n    const handleMouseMove = event => {\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n\n      if (target.tagName === \"A\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: props.date.startOf(\"year\").month(row * 4 + column)\n        });\n      }\n    };\n\n    const handleMonthTableClick = event => {\n      let target = event.target;\n\n      if (target.tagName === \"A\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      if (hasClass(target, \"disabled\")) return;\n      const column = target.cellIndex;\n      const row = target.parentNode.rowIndex;\n      const month = row * 4 + column;\n      const newDate = props.date.startOf(\"year\").month(month);\n\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n\n          ctx.emit(\"select\", false);\n        }\n      } else {\n        ctx.emit(\"pick\", month);\n      }\n    };\n\n    return {\n      handleMouseMove,\n      handleMonthTableClick,\n      rows,\n      getCellStyle,\n      t,\n      months\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  class: \"cell\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    class: \"el-month-table\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleMonthTableClick && _ctx.handleMonthTableClick(...args)),\n    onMousemove: _cache[1] || (_cache[1] = (...args) => _ctx.handleMouseMove && _ctx.handleMouseMove(...args))\n  }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, key) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key: key_,\n        class: normalizeClass(_ctx.getCellStyle(cell))\n      }, [createElementVNode(\"div\", null, [createElementVNode(\"a\", _hoisted_1, toDisplayString(_ctx.t(\"el.datepicker.months.\" + _ctx.months[cell.text])), 1)])], 2);\n    }), 128))]);\n  }), 128))])], 32);\n}\n\nvar MonthTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue\"]]);\n\nexport { MonthTable as default };","map":{"version":3,"mappings":"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","names":["datesInMonth","year","month","lang","firstDay","locale","startOf","daysInMonth","rangeArr","map","n","toDate","_sfc_main","defineComponent","props","disabledDate","type","selectionMode","default","minDate","maxDate","date","parsedValue","rangeState","endDate","selecting","emits","setup","ctx","t","useLocale","months","ref","localeData","monthsShort","_","computed","dayjs","i","rows2","j","cell","row","column","inRange","start","end","index","calTime","calEndDate","_a","isToday","cellDate","disabled","today","Date","style","every","current","castArray","findIndex","tagName","target","rowIndex","lastRow","lastColumn","handleMonthTableClick","handleMouseMove","rows","getCellStyle","_cache","_openBlock","class","onClick","onMousemove","_renderList","_createElementBlock","key","_createElementVNode"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-month-table.vue"],"sourcesContent":["<template>\n  <table\n    class=\"el-month-table\"\n    @click=\"handleMonthTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody>\n      <tr v-for=\"(row, key) in rows\" :key=\"key\">\n        <td v-for=\"(cell, key_) in row\" :key=\"key_\" :class=\"getCellStyle(cell)\">\n          <div>\n            <a class=\"cell\">{{\n              t('el.datepicker.months.' + months[cell.text])\n            }}</a>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { castArray, hasClass } from '@element-plus/utils'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst datesInMonth = (year: number, month: number, lang: string) => {\n  const firstDay = dayjs().locale(lang).startOf('month').month(month).year(year)\n  const numOfDays = firstDay.daysInMonth()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nexport default defineComponent({\n  props: {\n    disabledDate: {\n      type: Function as PropType<(_: Date) => void>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'month',\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: Object as PropType<Dayjs>,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n\n  emits: ['changerange', 'pick', 'select'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const months = ref(\n      props.date\n        .locale('en')\n        .localeData()\n        .monthsShort()\n        .map((_) => _.toLowerCase())\n    )\n    const tableRows = ref([[], [], []])\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const rows = tableRows.value\n      const now = dayjs().locale(lang.value).startOf('month')\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows[i]\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n\n          cell.type = 'normal'\n\n          const index = i * 4 + j\n          const calTime = props.date.startOf('year').month(index)\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'month')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'month'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'month')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'month')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'month')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'month')\n          }\n\n          const isToday = now.isSame(calTime)\n\n          if (isToday) {\n            cell.type = 'today'\n          }\n          cell.text = index\n          const cellDate = calTime.toDate()\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          row[j] = cell\n        }\n      }\n      return rows\n    })\n    const getCellStyle = (cell) => {\n      const style = {} as any\n      const year = props.date.year()\n      const today = new Date()\n      const month = cell.text\n\n      style.disabled = props.disabledDate\n        ? datesInMonth(year, month, lang.value).every(props.disabledDate)\n        : false\n      style.current =\n        castArray(props.parsedValue).findIndex(\n          (date) => date.year() === year && date.month() === month\n        ) >= 0\n      style.today = today.getFullYear() === year && today.getMonth() === month\n\n      if (cell.inRange) {\n        style['in-range'] = true\n\n        if (cell.start) {\n          style['start-date'] = true\n        }\n\n        if (cell.end) {\n          style['end-date'] = true\n        }\n      }\n      return style\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex\n      const column = target.cellIndex\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: props.date.startOf('year').month(row * 4 + column),\n        })\n      }\n    }\n    const handleMonthTableClick = (event) => {\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n      if (hasClass(target, 'disabled')) return\n      const column = target.cellIndex\n      const row = target.parentNode.rowIndex\n      const month = row * 4 + column\n      const newDate = props.date.startOf('year').month(month)\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else {\n        ctx.emit('pick', month)\n      }\n    }\n\n    return {\n      handleMouseMove,\n      handleMonthTableClick,\n      rows,\n      getCellStyle,\n      t,\n      months,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}